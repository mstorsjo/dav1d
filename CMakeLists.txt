cmake_minimum_required(VERSION 3.20.0)

include(CheckCCompilerFlag)
include(CheckFunctionExists)
include(CheckLanguage)
include(CheckLibraryExists)
include(CheckLinkerFlag)

project(dav1d C ASM)

set(CMAKE_C_STANDARD 17)

include_directories(cmake)
include_directories(include)
include_directories(include/dav1d)
include_directories(.)
include_directories(src)

if (WIN32)
  include_directories(include/compat)
endif()

# Convenience helper for adding an option if it is supported, automatically
# setting up suitable cache variables for the tests.
function(check_enable_option option)
  if (${option} MATCHES "^-Wno")
    # GCC silently accepts any unknown warning class in options like -Wno-foo,
    # but such unrecognized options can produce other distracting notices
    # if there actual warnings to print. Therefore, for options like -Wno-foo,
    # test whether -Wfoo is supported instead, and if it is, add -Wno-foo.
    string(REGEX REPLACE "^-Wno-" "-W" test_option ${option})
  else()
    set(test_option ${option})
  endif()
  # Transform the option name into a suitable cmake cache variable name, to
  # avoid requiring the caller to uniquely set one for each case.
  string(REGEX REPLACE "^--*" "" varname ${test_option})
  string(TOUPPER ${varname} varname)
  string(REGEX REPLACE "[-=]" "_" varname ${varname})
  set(varname "SUPPORTS_${varname}")
  check_c_compiler_flag(${test_option} ${varname})
  if (${varname})
    # If supported, enable the original form of the option that was requested.
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${option}" PARENT_SCOPE)
  endif()
endfunction()

if (NOT MSVC)
  # clang-cl supports -Wall, but it corresponds to -Weverything
  check_enable_option(-Wall)
endif()

check_enable_option(-Wundef)
check_enable_option(-Werror=vla)
check_enable_option(-Wno-maybe-uninitialized)
check_enable_option(-Wno-missing-field-initializers)
check_enable_option(-Wno-unused-parameter)
check_enable_option(-Wstrict-prototypes)
check_enable_option(-Werror=missing-prototypes)
check_enable_option(-Wshorten-64-to-32)

check_function_exists(sin HAVE_DEFAULT_MATH)
if (NOT HAVE_DEFAULT_MATH)
  check_library_exists(m sin "" HAVE_LIBM)
  if (HAVE_LIBM)
    link_libraries(m)
  endif()
endif()
check_library_exists(atomic __atomic_load_8 "" HAVE_LIBATOMIC)
if (HAVE_LIBATOMIC)
  link_libraries(atomic)
endif()
if (NOT WIN32)
  find_package(Threads)
  if (Threads_FOUND)
    link_libraries(${CMAKE_THREAD_LIBS_INIT})
  endif()
endif()

if (WIN32)
  add_compile_definitions(WIN32_LEAN_AND_MEAN)
  if (MSVC)
    add_compile_definitions(_CRT_SECURE_NO_WARNINGS)
    add_compile_definitions(_CRT_NONSTDC_NO_DEPRECATE)
  endif()
endif()

if (CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64")
  set(ARCH_AARCH64 1)
  message(STATUS "Enabling aarch64 assembly")
elseif (CMAKE_SYSTEM_PROCESSOR MATCHES "^arm")
  set(ARCH_ARM 1)
  message(STATUS "Enabling arm assembly")
elseif (CMAKE_SYSTEM_PROCESSOR MATCHES "^i.86$" OR CMAKE_SYSTEM_PROCESSOR MATCHES "^[Xx]86$")
  set(ARCH_I386 1)
  check_language(ASM_NASM)
  if (CMAKE_ASM_NASM_COMPILER)
    enable_language(ASM_NASM)
    message(STATUS "Enabling i386 nasm assembly")
  else()
    add_compile_definitions(NO_X86ASM)
    message(STATUS "Not enabling i386 nasm assembly")
  endif()
  if (CMAKE_SYSTEM_NAME STREQUAL "Darwin" OR CMAKE_SYSTEM_NAME STREQUAL "Windows")
    set(CMAKE_ASM_NASM_FLAGS "${CMAKE_ASM_NASM_FLAGS} -DPREFIX")
  endif()
elseif (CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "AMD64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "amd64")
  set(ARCH_X86_64 1)
  add_compile_definitions(PIC)
  check_language(ASM_NASM)
  if (CMAKE_ASM_NASM_COMPILER)
    enable_language(ASM_NASM)
    message(STATUS "Enabling x86_64 nasm assembly")
  else()
    add_compile_definitions(NO_X86ASM)
    message(STATUS "Not enabling x86_64 nasm assembly")
  endif()
  set(CMAKE_ASM_NASM_FLAGS "${CMAKE_ASM_NASM_FLAGS} -DARCH_X86_64=1")
  if (CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    set(CMAKE_ASM_NASM_FLAGS "${CMAKE_ASM_NASM_FLAGS} -DPREFIX")
  endif()
else()
  message(STATUS "Not enabling any assembly optimizations for ${CMAKE_SYSTEM_PROCESSOR}")
endif()
add_subdirectory(src)
add_subdirectory(tools)
add_subdirectory(tests/checkasm)
